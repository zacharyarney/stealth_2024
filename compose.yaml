# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  #  express-server:
  #    build:
  #      context: ./express-server
  #    ports:
  #      - '3001:3001'
  #      - '1234:1234'
  app:
    build:
      context: ./next-app
    environment:
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - db
    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker-compose up`.
  db:
    image: postgres
    #    restart: always
    #    user: example
    #    secrets:
    #      - db-password
    volumes:
      #      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: dev_db
      POSTGRES_USER: example
      POSTGRES_PASSWORD: example
    ports:
      - 5432:5432
    healthcheck:
      test: pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  postgres_data:
